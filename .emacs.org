#+TITLE:Emacs Configuration
#+AUTHOR: Giuseppe
#+PROPERTY: header-args :tangle ~/.emacs

* Packages
** Repos
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (setq package-native-compile t
        native-comp-async-report-warnings-errors nil)
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init (setq evil-want-keybinding nil evil-want-C-u-scroll t)
    :config (evil-set-undo-system 'undo-redo) (evil-mode 1))
#+end_src
*** Evil collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :init (setq evil-collection-want-unimpaired-p nil)
    :config (evil-collection-init)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src
*** Evil multiple cursors
#+begin_src emacs-lisp
  (use-package evil-mc
    :ensure t)
  (global-set-key (kbd "C-<") 'evil-mc-make-and-goto-next-match)
  (global-set-key (kbd "C->") 'evil-mc-undo-all-cursors)
#+end_src
** IDO vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :hook (ido-setup . (lambda () (define-key ido-completion-map (kbd "C-j") 'ido-next-match) (define-key ido-completion-map (kbd "C-k") 'ido-prev-match)))
    :init (ido-mode 1) (ido-vertical-mode 1))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src
** Vterm
#+begin_src emacs-lisp
  ;; Requirements:
  ;; emacs module support (module-file-suffix != nil)
  ;; lmake >= 3.11
  ;; libtool-bin
  ;; OPTIONAL: libvterm >= 0.2
  (use-package vterm
    :ensure t
    :config (setq vterm-kill-buffer-on-exit t)
    (add-hook 'vterm-exit-functions
              (lambda (_ _)
                (let* ((buffer (current-buffer))
                       (window (get-buffer-window buffer)))
                  (when (not (one-window-p))
                    (delete-window window))
                  (kill-buffer buffer)))))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (setq yas-snippet-dirs '("~/.dotfiles/emacs-snippets"))
    :config (yas-reload-all)
    :hook (prog-mode . yas-minor-mode) (org-mode . yas-minor-mode) (latex-mode . yas-minor-mode))
#+end_src
** LSP
#+begin_src emacs-lisp
  (use-package company
    :after eglot
    :ensure t
    :hook (eglot-managed-mode . company-mode))

  (use-package eglot
    :defer t
    :config (add-to-list 'eglot-server-programs '((simpc-mode) "clangd")))
#+end_src
** Typescript
#+begin_src emacs-lisp
  (setq indent-line-function 'insert-tab)
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (setq tide-format-options '(:indentSize 2 :tabSize 2))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1))
  (add-hook 'typescript-mode-hook #'setup-tide-mode)

  (use-package web-mode
    :config (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    :hook (web-mode . (lambda ()
                        (when (string-equal "tsx" (file-name-extension buffer-file-name))
                          (setup-tide-mode)))))
  (setq-default typescript-indent-level 2)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package gruber-darker-theme
    :ensure t
    :config (load-theme 'gruber-darker t))
#+end_src
* General
** Remove menus
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
#+end_src
** Org mode
#+begin_src emacs-lisp
  (setq org-preview-latex-image-directory "~/.emacs.d/latexpreview/"
        org-directory "~/Documents/various/org"
        org-startup-folded t
        org-hide-emphasis-markers t
        org-html-validation-link nil)
  (add-hook 'org-mode-hook #'org-indent-mode)
#+end_src
*** Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/Documents/todo.org")
        org-agenda-start-on-weekday nil
        org-agenda-start-day "+0d"
        org-agenda-current-time-string "‚Üê NOW"
        org-agenda-time-grid '((daily today require-timed remove-match)
                               (800 1000 1200 1400 1600 1800 2000)
                               " --- " ""))
#+end_src
*** Org appearance
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-document-title ((t (:foreground "pale turquoise" :bold t :height 1.5))))
   '(org-document-info ((t (:foreground "pale turquoise" :height 1.3))))
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-todo ((t (:foreground "red"  :bold t :height 0.9))))
   '(org-done ((t (:foreground "PaleGreen" :height 0.9))))
   )
#+end_src
*** Org Agenda evil-mode
#+begin_src emacs-lisp
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (local-set-key "k" 'org-agenda-previous-line)
              (local-set-key "j" 'org-agenda-next-line)
              (local-set-key "p" 'org-agenda-capture)
              (local-set-key "n" 'org-agenda-goto-date)
              (local-set-key (kbd "C-w C-w") 'evil-window-next)
              (local-set-key (kbd "C-w o") 'delete-other-windows)
              ))
#+end_src
*** Org crypt
#+begin_src emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt"))
        org-crypt-key nil)
#+end_src
** Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-lhAX --group-directories-first"
        dired-dwim-target t)
  (add-hook 'dired-mode-hook #'auto-revert-mode)
#+end_src
** Performance
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-threshold (* 100 1024 1024))
#+end_src
** Style
#+begin_src emacs-lisp
  (set-frame-parameter nil 'alpha-background 99)
  (set-frame-font "IosevkaTerm NFM 12" nil t)
  (setq-default indent-tabs-mode nil)
  (setq c-basic-offset 4
        whitespace-style '(face tabs spaces trailing space-before-tab space-after-tab space-mark tab-mark)
        display-line-numbers-type 'relative)
  ;; (setq indent-line-function 'insert-tab)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'dired-mode-hook #'display-line-numbers-mode)
  (column-number-mode 1)
  (size-indication-mode 1)
#+end_src
** Custom functions
#+begin_src emacs-lisp
  (defun vterm-split ()
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (vterm 'N))
#+end_src
** Keybind
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-g") 'evil-normal-state)
  (global-set-key (kbd "M-!") 'compile)
  (global-set-key (kbd "C-x C-a") 'org-agenda-list)
  (global-set-key (kbd "C-x C-<return>") 'vterm-split)
#+end_src
** TTY
#+begin_src emacs-lisp
  (unless (display-graphic-p)
    (load-theme 'tsdh-dark t)
    (global-set-key (kbd "C-x RET") 'vterm-split)
    (unless (string-match-p "N/A" (battery))
      (display-battery-mode)))
#+end_src
** Misc
#+begin_src emacs-lisp
  (setq auto-save-default nil
        use-short-answers 1
        doc-view-continuous t
        compile-command ""
        calendar-week-start-day 1
        vc-follow-symlinks t
        use-dialog-box nil
        make-backup-files nil)
  (load-file "~/Documents/.emacs/simpc-mode.el")
  (add-to-list 'auto-mode-alist '("\\.[hc]\\(pp\\)?\\'" . simpc-mode))
#+end_src
