#+TITLE:Emacs Configuration
#+AUTHOR: Giuseppe
#+PROPERTY: header-args :tangle ~/.emacs

* Packages
** Repos
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (setq package-native-compile t
        native-comp-async-report-warnings-errors nil)
  (package-initialize)

  (eval-and-compile
    (require 'use-package-ensure)
    (setq use-package-always-defer t
          use-package-always-ensure t
          use-package-always-pin "melpa-stable"))
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :init (setq evil-want-keybinding nil evil-want-C-u-scroll t)
    :config (evil-set-undo-system 'undo-redo) (evil-mode 1))
#+end_src
*** Evil collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :demand t
    :init (setq evil-collection-want-unimpaired-p nil)
    :config (evil-collection-init)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src
*** Evil multiple cursors
#+begin_src emacs-lisp
  (use-package evil-mc
    :pin "melpa")
#+end_src
** IDO vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :hook (ido-setup . (lambda ()
                         (define-key ido-completion-map (kbd "C-j") 'ido-next-match)
                         (define-key ido-completion-map (kbd "C-k") 'ido-prev-match)))
    :init (ido-mode 1) (ido-vertical-mode 1))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
** Vterm
*Requirements:*
- emacs module support (module-file-suffix != nil)
  - cmake >= 3.11
  - libtool-bin
  - OPTIONAL: libvterm >= 0.2
#+begin_src emacs-lisp
  (use-package vterm
    :pin "melpa"
    :config (setq vterm-kill-buffer-on-exit t)
    (add-hook 'vterm-exit-functions
              (lambda (_ _)
                (let* ((buffer (current-buffer))
                       (window (get-buffer-window buffer)))
                  (when (not (one-window-p))
                    (delete-window window))
                  (kill-buffer buffer)))))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  ;;(use-package yasnippet
  ;;  :init (setq yas-snippet-dirs '("~/.dotfiles/emacs-snippets"))
  ;;  :config (yas-reload-all)
  ;;  :hook (prog-mode . yas-minor-mode) (org-mode . yas-minor-mode) (latex-mode . yas-minor-mode))
#+end_src
** LSP
#+begin_src emacs-lisp
  (use-package company)

  (use-package eglot
    :hook (java-mode . eglot-ensure)
    :config (add-to-list 'eglot-server-programs '((simpc-mode) "clangd")))
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package gruber-darker-theme
    :pin "melpa"
    :demand t
    :config (load-theme 'gruber-darker t))
#+end_src
* General
** Style
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
  (set-frame-font "IosevkaTerm NFM 12" nil t)
  (setq-default indent-tabs-mode nil)
  (setq whitespace-style '(face tabs spaces trailing space-before-tab space-after-tab space-mark tab-mark)
        display-line-numbers-type 'relative
        indent-line-function 'insert-tab)
  (column-number-mode 1)
  (size-indication-mode 1)
#+end_src
** Languages
*** C
#+begin_src emacs-lisp
  (setq c-basic-offset 4)
  (let ((file-path "~/Documents/.emacs/simpc-mode.el"))
    (if (file-exists-p  file-path)
        (progn
          (load-file file-path)
          (add-to-list 'auto-mode-alist '("\\.[hc]\\(pp\\)?\\'" . simpc-mode)))
      (message "File does not exist: %s" file-path)))
#+end_src
*** Typescript
#+begin_src emacs-lisp
  ;;  (defun setup-tide-mode ()
  ;;    (interactive)
  ;;    (tide-setup)
  ;;    (flycheck-mode +1)
  ;;    (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;;    (setq tide-format-options '(:indentSize 2 :tabSize 2))
  ;;    (eldoc-mode +1)
  ;;    (tide-hl-identifier-mode +1))
  ;;  (add-hook 'typescript-mode-hook #'setup-tide-mode)
  ;;
  ;;  (use-package web-mode
  ;;    :config (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  ;;    :hook (web-mode . (lambda ()
  ;;                        (when (string-equal "tsx" (file-name-extension buffer-file-name))
  ;;                          (setup-tide-mode)))))
  ;;  (setq-default typescript-indent-level 2)
#+end_src
** Org mode
#+begin_src emacs-lisp
  (setq org-preview-latex-image-directory "~/.emacs.d/latexpreview/"
        org-directory "~/Documents/various/org"
        org-startup-folded t
        org-hide-emphasis-markers t
        org-html-validation-link nil)

  (custom-set-faces
   '(org-document-title ((t (:foreground "pale turquoise" :bold t :height 1.5))))
   '(org-document-info ((t (:foreground "pale turquoise" :height 1.3))))
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-todo ((t (:foreground "red"  :bold t :height 0.9))))
   '(org-done ((t (:foreground "PaleGreen" :height 0.9)))))
#+end_src
** Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-lhAX --group-directories-first"
        dired-dwim-target t)
#+end_src
** Custom functions
#+begin_src emacs-lisp
  (defun custom/vterm-split-vertical ()
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (vterm 'N))

  (defun custom/vterm-split-horizontal ()
    (interactive)
    (split-window-horizontally)
    (other-window 1)
    (vterm 'N))

  (defun custom/ensure-evil-mc ()
    (interactive)
    (when (fboundp 'evil-mc-mode)
      (evil-mc-mode 1)
      (local-set-key (kbd "C-<") 'evil-mc-make-and-goto-next-match)
      (local-set-key (kbd "C->") 'evil-mc-undo-all-cursors)))
#+end_src
** Custom Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-g") 'evil-normal-state)
  (global-set-key (kbd "M-!") 'compile)
  (global-set-key (kbd "C-x C-<return> v") 'custom/vterm-split-horizontal)
  (global-set-key (kbd "C-x C-<return> s") 'custom/vterm-split-vertical)
  (global-set-key (kbd "C-x C-<return> s") 'custom/vterm-split-vertical)
  (global-set-key (kbd "C-<") 'custom/ensure-evil-mc)
#+end_src
** Hooks
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'dired-mode-hook #'display-line-numbers-mode)
  (add-hook 'dired-mode-hook #'auto-revert-mode)
  (add-hook 'org-mode-hook #'org-indent-mode)
#+end_src
** TTY
#+begin_src emacs-lisp
  (unless (display-graphic-p)
    (load-theme 'tsdh-dark t)
    (global-set-key (kbd "C-x RET v") 'custom/vterm-split-horizontal)
    (global-set-key (kbd "C-x RET s") 'custom/vterm-split-vertical)
    (unless (string-match-p "N/A" (battery))
      (display-battery-mode)))
#+end_src
** Misc
#+begin_src emacs-lisp
  (setq auto-save-default nil
        use-short-answers 1
        doc-view-continuous t
        compile-command ""
        calendar-week-start-day 1
        vc-follow-symlinks t
        use-dialog-box nil
        make-backup-files nil)
#+end_src
