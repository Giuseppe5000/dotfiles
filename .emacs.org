#+TITLE: Emacs Configuration
#+AUTHOR: Giuseppe
#+PROPERTY: header-args :tangle yes

* Packages

** MELPA repo
#+begin_src elisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src
** Evil mode
#+begin_src elisp
  (use-package evil
    :ensure t
    :init (setq evil-want-keybinding nil)
    :config (evil-set-undo-system 'undo-redo) (evil-mode 1))
#+end_src
*** Evil collection
#+begin_src elisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config (evil-collection-init))
#+end_src
*** Evil commentary
#+begin_src elisp
  (use-package evil-commentary
    :after evil
    :ensure t
    :init (evil-commentary-mode 1))
#+end_src
*** Org-agenda fix
#+begin_src elisp
  (add-hook 'org-agenda-mode-hook
	    (lambda ()
	      (local-set-key "k" 'org-agenda-previous-line)
	      (local-set-key "j" 'org-agenda-next-line)
	      (local-set-key (kbd "C-k") 'org-agenda-capture)
	      (local-set-key (kbd "C-j") 'org-agenda-goto-date)
	      ))
#+end_src
** Auto-package-update
#+begin_src elisp
  (use-package auto-package-update
    :ensure t
    :config (auto-package-update-maybe))
#+end_src
** IDO vertical
#+begin_src elisp
  (use-package ido-vertical-mode
    :ensure t
    :hook (ido-setup . (lambda () (define-key ido-completion-map (kbd "C-j") 'ido-next-match) (define-key ido-completion-map (kbd "C-k") 'ido-prev-match)))
    :init (ido-mode 1) (ido-vertical-mode 1))
#+end_src
** Vterm
#+begin_src elisp
  (use-package vterm
    :ensure t
    :config (setq vterm-shell "/usr/bin/zsh" kill-buffer-query-functions nil))
#+end_src
*** Vterm toggle
#+begin_src elisp
  (use-package vterm-toggle
    :ensure t
    :config (global-set-key (kbd "C-x C-<return>") 'vterm-toggle))
#+end_src

Show vterm buffer in bottom side

#+begin_src elisp
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
	       '((lambda (buffer-or-name _)
		   (let ((buffer (get-buffer buffer-or-name)))
		     (with-current-buffer buffer
		       (or (equal major-mode 'vterm-mode)
			   (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
		 (display-buffer-reuse-window display-buffer-at-bottom)
		 (reusable-frames . visible)
		 (window-height . 0.3)))
#+end_src
 
** Magit
#+begin_src elisp
  (use-package magit
    :ensure t)
#+end_src
*** Magit-todos
#+begin_src elisp
  (use-package magit-todos
    :after magit
    :ensure t
    :config (magit-todos-mode 1))
#+end_src
** Diff-hl
#+begin_src elisp
  (use-package diff-hl
    :ensure t
    :init (global-diff-hl-mode 1))
#+end_src
** LSP

Require clangd and pyright

#+begin_src elisp
  (use-package eglot
    :ensure t
    :hook (c++-mode . eglot-ensure)
    :ensure t)

  (use-package company
    :ensure t
    :config (setq company-idle-delay 0)
    :hook (c++-mode . company-mode))

  (use-package python-mode
    :ensure t
    :hook ((python-mode . eglot-ensure)
	   (python-mode . company-mode)))
#+end_src
** Mu4e
#+begin_src elisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

  (require 'mu4e)

  ;; Set keybind to enter mu4
  (global-set-key (kbd "C-x y") 'mu4e)

  ;; Do not leave message open after it has been sent
  (setq message-kill-buffer-on-exit t)
  ;; Don't ask for a 'context' upon opening mu4e
  (setq mu4e-context-policy 'pick-first)
  ;; Don't ask to quit
  (setq mu4e-confirm-quit nil)

  (setq mu4e-maildir-shortcuts
	'(("/GmailAccount/INBOX" . ?g)
	  ("/HotmailAccount/INBOX" . ?h)
	  ))

  ;; attachments go here
  (setq mu4e-attachment-dir  "~/Scaricati")

  ;; Mail auto refresh
  (run-with-timer 0 (* 5 60) 'mu4e-update-mail-and-index 1)
#+end_src

Contexts conf settings

#+begin_src elisp
  (setq mu4e-contexts
	`(
	  ,(make-mu4e-context
	    :name "Gmail Account"
	    :match-func (lambda (msg)
			  (when msg
			    (mu4e-message-contact-field-matches
			     msg '(:from :to :cc :bcc) "giuseppetutino1@gmail.com")))

	    :vars '(
		    (mu4e-trash-folder . "/GmailAccount/[Gmail].Cestino")
		    (mu4e-refile-folder . "/GmailAccount/[Gmail].Tutti i messaggi")
		    (mu4e-drafts-folder . "/GmailAccount/[Gmail].Bozze")
		    (mu4e-sent-folder . "/GmailAccount/[Gmail].Posta inviata")
		    (user-mail-address  . "giuseppetutino1@gmail.com")
		    (user-full-name . "Giuseppe Tutino")
		    (smtpmail-smtp-user . "giuseppetutino1")
		    (smtpmail-local-domain . "gmail.com")
		    (smtpmail-default-smtp-server . "smtp.gmail.com")
		    (smtpmail-smtp-server . "smtp.gmail.com")
		    (smtpmail-smtp-service . 587)
		    ))

	  ,(make-mu4e-context
	    :name "Hotmail Account"
	    :match-func (lambda (msg) (when msg
					(string-prefix-p "/HotmailAccount" (mu4e-message-field msg :maildir))))
	    :vars '(
		    (mu4e-trash-folder . "/HotmailAccount/Junk")
		    (mu4e-refile-folder . "/HotmailAccount/Archivio")
		    (mu4e-drafts-folder . "/HotmailAccount/Drafts")
		    (mu4e-sent-folder . "/HotmailAccount/Sent")
		    (user-mail-address . "onepiecegiuseppe@hotmail.it")
		    (smtpmail-smtp-user . "onepiecegiuseppe")
		    (smtpmail-local-domain . "outlook.it")
		    (smtpmail-default-smtp-server . "outlook.it")
		    (smtpmail-smtp-server . "smtp.outlook.it")
		    (smtpmail-smtp-service . 587)
		    ))
	  ))

  ;; Set how email is to be sent
  (setq send-mail-function (quote smtpmail-send-it))
#+end_src

*** Mu4e alert
#+begin_src elisp
  (use-package mu4e-alert
    :ensure t
    :config (setq mu4e-alert-interesting-mail-query
		  (concat
		   "flag:unread AND maildir:/GmailAccount/INBOX "
		   "OR "
		   "flag:unread AND maildir:/HotmailAccount/INBOX "
		   ))
    :init (mu4e-alert-enable-mode-line-display))
#+end_src
** Org Superstar
#+begin_src elisp
  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode))
#+end_src
** Doom modeline
#+begin_src elisp
  (use-package doom-modeline
    :ensure t
    :config (setq column-number-mode t doom-modeline-modal nil)
    :init (doom-modeline-mode 1))
#+end_src
** Doom theme
#+begin_src elisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-city-lights t)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src


* General

** Remove menus
#+begin_src elisp 
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
#+end_src
** Org
#+begin_src elisp 
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-startup-folded t)
  (setq org-agenda-files (list "~/Documenti/agenda.org" "~/Documenti/.gcal.org"))
  (setq calendar-week-start-day 1
	calendar-day-name-array ["Domenica" "Lunedì" "Martedì" "Mercoledì"
				 "Giovedì" "Venerdì" "Sabato"]
	calendar-month-name-array ["Gennaio" "Febbraio" "Marzo" "Aprile"
				   "Maggio" "Giugno" "Luglio" "Agosto"
				   "Settembre" "Ottobre" "Novembre"
				   "Dicembre"])
#+end_src
** Dired
#+begin_src elisp
  (setq dired-listing-switches "-lhAX --group-directories-first")
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file)
#+end_src
** Backup

Write backups to ~/.emacs.d/backup/

#+begin_src elisp 
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	backup-by-copying      t  ; Don't de-link hard links
	version-control        t  ; Use version numbers on backups
	delete-old-versions    t  ; Automatically delete excess backups:
	kept-new-versions      20 ; how many of the newest versions to keep
	kept-old-versions      5) ; and how many of the old
#+end_src
** Newsticker
#+begin_src elisp
  (setq newsticker-url-list-defaults nil) 

  (setq newsticker-url-list '(
			      ("Arch Linux" "https://www.archlinux.org/feeds/news/" nil nil nil)
			      ("Free Games" "https://steamcommunity.com/groups/freegamesfinders/rss/" nil nil nil)
			      ("Steam" "https://store.steampowered.com/feeds/news/collection/steam" nil nil nil)
			      ("Android World" "https://www.androidworld.it/feed/" nil nil nil)
			      ("Everyeye" "https://www.everyeye.it/feed/feed_news_rss.asp" nil nil nil)
			      ("Ansa" "https://www.ansa.it/sito/ansait_rss.xml" nil nil nil)
			      ("Corriere della Sera" "http://xml2.corriereobjects.it/rss/homepage.xml" nil nil nil)
			      ("Il Sole 24 Ore" "https://www.ilsole24ore.com/rss/italia.xml" nil nil nil)
			      ("Repubblica" "http://www.repubblica.it/rss/homepage/rss2.0.xml" nil nil nil)
			      ))

  (setq newsticker-groups
	'("Feeds"
	  ("Software"
	   "Arch Linux"
	   "Free Games"
	   "Steam"
	   "Android World"
	   "Everyeye")
	  ("News"
	   "Ansa"
	   "Corriere della Sera"
	   "Il Sole 24 Ore"
	   "Repubblica")))
#+end_src
** Indentation
#+begin_src elisp
  (setq c-default-style "linux"
	c-basic-offset 2)
#+end_src
** Opacity
#+begin_src elisp
  (set-frame-parameter nil 'alpha-background 98)
  (add-to-list 'default-frame-alist '(alpha-background . 98))
#+end_src
** Misc
#+begin_src elisp
  (setq initial-scratch-message ";; Scratch buffer\n\n")
  (setq use-short-answers 1)
  (setq doc-view-continuous t)
  (pixel-scroll-precision-mode)
  (electric-pair-mode)
  (global-hl-line-mode)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (setq auto-window-vscroll nil)
#+end_src


* Custom functions

** Tangle

Automatic export org conf in elisp

#+begin_src elisp
  (defun custom/tangle-emacs-conf()
    (when (equal (buffer-file-name) (expand-file-name "~/.emacs.org"))
      (org-babel-tangle)
      (byte-compile-file ".emacs.el")
      (delete-file ".emacs.el")
      ))
  (add-hook 'after-save-hook #'custom/tangle-emacs-conf)
#+end_src

** Kill all buffers
#+begin_src elisp
  (defun custom/kill-all-buffers()
    (interactive)
    (mapc 'kill-buffer (buffer-list))
    (delete-other-windows)
    (eglot-shutdown-all)
    (cd "~"))

  (defalias 'kab 'custom/kill-all-buffers)
#+end_src
