#+TITLE: Emacs Configuration
#+AUTHOR: Giuseppe
#+PROPERTY: header-args :tangle ~/.emacs

* Packages
** Repos
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (setq package-archive-priorities '(("gnu" . 2)("melpa" . 1)))
  (package-initialize)
  (setq package-native-compile t)
  (setq native-comp-async-report-warnings-errors nil)
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init (setq evil-want-keybinding nil) (setq evil-want-C-u-scroll t)
    :config (evil-set-undo-system 'undo-redo) (evil-mode 1))
#+end_src
*** Evil collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :init (setq evil-collection-want-unimpaired-p nil)
    :config (evil-collection-init)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src
** IDO vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :hook (ido-setup . (lambda () (define-key ido-completion-map (kbd "C-j") 'ido-next-match) (define-key ido-completion-map (kbd "C-k") 'ido-prev-match)))
    :init (ido-mode 1) (ido-vertical-mode 1))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (setq yas-snippet-dirs '("~/.dotfiles/emacs-snippets"))
    :config (yas-reload-all)
    :hook (prog-mode . yas-minor-mode) (org-mode . yas-minor-mode) (latex-mode . yas-minor-mode))
#+end_src
** LSP
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :defer t)

  (use-package company
    :after eglot
    :ensure t
    :config (setq company-idle-delay nil) (define-key company-mode-map (kbd "TAB") #'company-complete-common)
    :hook (eglot-managed-mode . company-mode))
#+end_src
** Mu4e
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/elpa/mu4e-1.8.14")
  (require 'mu4e)

  (setq mail-user-agent 'mu4e-user-agent)
  (setq mu4e-drafts-folder "/GmailAccount/[Gmail].Bozze")
  (setq mu4e-sent-folder   "/GmailAccount/[Gmail].Posta inviata")
  (setq mu4e-trash-folder  "/GmailAccount/[Gmail].Cestino")
  (setq mu4e-refile-folder  "/GmailAccount/[Gmail].Tutti i messaggi")

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)

  (setq mu4e-maildir-shortcuts
        '( (:maildir "/GmailAccount/INBOX"                    :key ?i)
           (:maildir "/GmailAccount/[Gmail].Posta inviata"    :key ?s)
           (:maildir "/GmailAccount/[Gmail].Cestino"          :key ?t)
           (:maildir "/GmailAccount/[Gmail].Tutti i messaggi" :key ?a)))

  ;; allow for updating mail using 'U' in the main view:
  (setq mu4e-get-mail-command "offlineimap")

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  ;; don't ask to quit
  (setq mu4e-confirm-quit nil)

  (setq
   user-mail-address (with-temp-buffer
                       (insert-file-contents "~/Documenti/.emacs/email.txt")
                       (replace-regexp-in-string "\n$" "" (buffer-string)))
   user-full-name  "Giuseppe Tutino")

  (require 'smtpmail)
  (setq message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
        smtpmail-auth-credentials
        '(("smtp.gmail.com" 587 user-mail-address nil))
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587)

  ;; don't save messages to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)
#+end_src
** Org timeblock
#+begin_src emacs-lisp
  (use-package org-timeblock
    :ensure t
    :defer t
    :config (setq org-timeblock-span 7)
    :hook (org-timeblock-mode . turn-off-evil-mode))
#+end_src
** Org bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (setq org-bullets-bullet-list '("✜" "●" "◉" "○"))
    :hook (org-mode . org-bullets-mode))
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package gruber-darker-theme
    :ensure t
    :config (load-theme 'gruber-darker t))
#+end_src
* General
** Remove menus
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
#+end_src
** Org mode
#+begin_src emacs-lisp
  (setq org-preview-latex-image-directory "~/.emacs.d/latexpreview/")
  (setq org-directory "~/Documenti/Org")
  (setq org-startup-folded t)
  (setq org-hide-emphasis-markers t)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  (setq org-html-validation-link nil)
  (add-hook 'org-mode-hook #'org-indent-mode)
#+end_src
*** Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files (list "~/Documenti/Org/Uni.org" "~/Documenti/Org/Todo.org"))
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-start-day "+0d")
  (setq org-agenda-time-grid '((daily today require-timed remove-match)
                               (800 1000 1200 1400 1600 1800 2000)
                               " --- " ""))
  (setq org-agenda-current-time-string "← NOW")
  (setq org-agenda-exporter-settings
        '((ps-left-header (list 'org-agenda-write-buffer-name))
          (ps-right-header
           (list "/pagenumberstring load"
                 (lambda () (format-time-string "%d/%m/%Y"))))
          (ps-print-color-p t)
          (ps-default-bg t)
          (ps-font-size '(12 . 11))
          (ps-left-margin 0)
          (ps-right-margin 0)
          (ps-bottom-margin 0)
          (ps-top-margin 0)
          (ps-print-header nil)))
#+end_src
*** Org appearance
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-document-title ((t (:foreground "pale turquoise" :bold t :height 1.5))))
   '(org-document-info ((t (:foreground "pale turquoise" :height 1.3))))
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-todo ((t (:foreground "red"  :bold t :height 0.9))))
   '(org-done ((t (:foreground "PaleGreen" :height 0.9))))
   )
#+end_src
*** Org Agenda evil-mode
#+begin_src emacs-lisp
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (local-set-key "k" 'org-agenda-previous-line)
              (local-set-key "j" 'org-agenda-next-line)
              (local-set-key "p" 'org-agenda-capture)
              (local-set-key "n" 'org-agenda-goto-date)
              (local-set-key (kbd "C-w C-w") 'evil-window-next)
              (local-set-key (kbd "C-w o") 'delete-other-windows)
              ))
#+end_src
** Newsticker
#+begin_src emacs-lisp
  (setq newsticker-url-list-defaults nil)
  (load "~/Documenti/.emacs/newsticker.el")
#+end_src
** Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-lhAX --group-directories-first")
  (add-hook 'dired-mode-hook #'auto-revert-mode)
#+end_src
** Performance
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (setq gc-cons-threshold (* 100 1024 1024))
#+end_src
** Style
#+begin_src emacs-lisp
  (set-frame-parameter nil 'alpha-background 99)
  (set-frame-font "IosevkaTerm NFM 12" nil t)
  (setq-default indent-tabs-mode nil)
  (setq c-basic-offset 4)
  (setq whitespace-style '(face tabs spaces trailing space-before-tab space-after-tab space-mark tab-mark))
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (column-number-mode 1)
  (size-indication-mode 1)
#+end_src
** Backup files
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying      t  ; Don't de-link hard links
        version-control        t  ; Use version numbers on backups
        delete-old-versions    t  ; Automatically delete excess backups:
        kept-new-versions      20 ; how many of the newest versions to keep
        kept-old-versions      5) ; and how many of the old
#+end_src
** Custom functions
#+begin_src emacs-lisp
  (defun eshell-split ()
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (eshell 'N))

  (defun org-agenda-timeblock ()
    (interactive)
    (org-timeblock)
    (org-agenda nil "t")
    (shrink-window-horizontally 50))
#+end_src
** Keybind
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-g") 'evil-normal-state)
  (global-set-key (kbd "M-!") 'compile)
  (global-set-key (kbd "C-x C-a") 'org-agenda-timeblock)
  (global-set-key (kbd "C-x C-<return>") 'eshell-split)
#+end_src
** TTY
#+begin_src emacs-lisp
  (unless (display-graphic-p)
    (load-theme 'tsdh-dark t)
    (global-set-key (kbd "C-x RET") 'eshell-split)
    (unless (string-match-p "N/A" (battery))
      (display-battery-mode)))
#+end_src
** Misc
#+begin_src emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":~/.cargo/bin"))
  (setq exec-path (append exec-path '("~/.cargo/bin")))
  (setq auto-save-default nil)
  (setq use-short-answers 1)
  (setq doc-view-continuous t)
  (setq compile-command "")
  (setq calendar-week-start-day 1)
  (setq lpr-command "gtklp")
  (setq vc-follow-symlinks t)
  (setq use-dialog-box nil)
#+end_src
