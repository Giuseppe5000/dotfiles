#+TITLE:Emacs Configuration
#+AUTHOR: Giuseppe
#+PROPERTY: header-args :tangle ~/.emacs

* Packages
** Repos
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (setq package-native-compile t
        native-comp-async-report-warnings-errors nil)
  (package-initialize)

  (eval-and-compile
    (require 'use-package-ensure)
    (setq use-package-always-defer t
          use-package-always-ensure t
          use-package-always-pin "nongnu"))
#+end_src
** IDO vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :pin "melpa-stable"
    :init
    (ido-mode 1)
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
** LSP
#+begin_src emacs-lisp
  (use-package company
    :pin "melpa-stable"
    :after eglot
    :hook (eglot-managed-mode . company-mode))

  (use-package eglot
    :hook (java-mode . eglot-ensure)
    :config (add-to-list 'eglot-server-programs '((simpc-mode) "clangd")))
#+end_src
** Vterm
*Requirements:*
- emacs module support (module-file-suffix != nil)
- cmake >= 3.11
- libtool-bin
- OPTIONAL: libvterm >= 0.2
#+begin_src emacs-lisp
  (use-package vterm
    :pin "melpa"
    :config (setq vterm-kill-buffer-on-exit t)
    (add-hook 'vterm-exit-functions
              (lambda (_ _)
                (let* ((buffer (current-buffer))
                       (window (get-buffer-window buffer)))
                  (when (not (one-window-p))
                    (delete-window window))
                  (kill-buffer buffer)))))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :pin "melpa-stable"
    :init (setq yas-snippet-dirs '("~/.dotfiles/emacs-snippets"))
    :config (yas-reload-all)
    :hook (org-mode . yas-minor-mode))
#+end_src
** Multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-beginnings-of-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this-word)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this-word)
#+end_src
** Expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :pin "melpa-stable"
    :bind ("C-@" . er/expand-region))
#+end_src
** EMMS
#+begin_src emacs-lisp
  (defun emms-start ()
    (interactive)
    (require 'emms-setup)
    (emms-all)
    (setq emms-source-file-default-directory "~/Documents/music")
    (setq emms-player-list '(emms-player-mpv))
    (setq emms-player-mpv-environment (list (concat "MPV_HOME=" (expand-file-name "~") "/.config/emms-mpv/"))))
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package gruber-darker-theme
    :pin "melpa"
    :demand t
    :config (load-theme 'gruber-darker t))
#+end_src
* General
** Style
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
  (set-frame-font "IosevkaTerm NFM 12" nil t)
  (setq-default indent-tabs-mode nil)
  (setq whitespace-style '(face tabs spaces trailing space-before-tab space-after-tab space-mark tab-mark)
        display-line-numbers-type 'relative
        indent-line-function 'insert-tab
        display-line-numbers-type 'visual)
  (column-number-mode 1)
  (size-indication-mode 1)
#+end_src
** Languages
*** C
#+begin_src emacs-lisp
  (setq c-basic-offset 4)
  (let ((file-path "~/.dotfiles/emacs-modes/simpc-mode.el"))
    (if (file-exists-p  file-path)
        (progn
          (load-file file-path)
          (add-to-list 'auto-mode-alist '("\\.[hc]\\(pp\\)?\\'" . simpc-mode)))
      (message "File does not exist: %s" file-path)))
#+end_src
*** Typescript
#+begin_src emacs-lisp
  ;;  (defun setup-tide-mode ()
  ;;    (interactive)
  ;;    (tide-setup)
  ;;    (flycheck-mode +1)
  ;;    (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;;    (setq tide-format-options '(:indentSize 2 :tabSize 2))
  ;;    (eldoc-mode +1)
  ;;    (tide-hl-identifier-mode +1))
  ;;  (add-hook 'typescript-mode-hook #'setup-tide-mode)
  ;;
  ;;  (use-package web-mode
  ;;    :config (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  ;;    :hook (web-mode . (lambda ()
  ;;                        (when (string-equal "tsx" (file-name-extension buffer-file-name))
  ;;                          (setup-tide-mode)))))
  ;;  (setq-default typescript-indent-level 2)
#+end_src
** Org mode
#+begin_src emacs-lisp
  (setq org-preview-latex-image-directory "~/.emacs.d/latexpreview/"
        org-directory "~/Documents/various/org"
        org-startup-folded t
        org-hide-emphasis-markers t
        org-html-validation-link nil)

  (custom-set-faces
   '(org-document-title ((t (:foreground "pale turquoise" :bold t :height 1.5))))
   '(org-document-info ((t (:foreground "pale turquoise" :height 1.3))))
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-todo ((t (:foreground "red"  :bold t :height 0.9))))
   '(org-done ((t (:foreground "PaleGreen" :height 0.9))))
   '(org-block ((t (:background "#181818" :foreground "gray")))))
#+end_src
*** Auto html export
Export some specific org files to html when closing.
#+begin_src emacs-lisp
  (defun custom/org-mode-export-hook ()
    (when (string-prefix-p "/home/giuseppe/Documents/uni" (buffer-file-name))
      (add-hook 'kill-buffer-hook 'org-html-export-to-html t t)))
  (add-hook 'org-mode-hook #'custom/org-mode-export-hook)
#+end_src
** Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-lhAX --group-directories-first"
        dired-dwim-target t)
#+end_src
** Custom functions
#+begin_src emacs-lisp
  (defun custom/vterm-split-vertical ()
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (vterm 'N))

  (defun custom/vterm-split-horizontal ()
    (interactive)
    (split-window-horizontally)
    (other-window 1)
    (vterm 'N))

  (defun custom/fix-accent ()
    (interactive)
    (beginning-of-buffer)
    (query-replace "a'" "à")
    (beginning-of-buffer)
    (query-replace "e'" "è")
    (beginning-of-buffer)
    (query-replace "i'" "ì")
    (beginning-of-buffer)
    (query-replace "o'" "ò")
    (beginning-of-buffer)
    (query-replace "u'" "ù"))
#+end_src
** Custom Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "M-!") 'compile)
  (global-set-key (kbd "C-x C-<return> 3") 'custom/vterm-split-horizontal)
  (global-set-key (kbd "C-x C-<return> 2") 'custom/vterm-split-vertical)
  (global-set-key (kbd "C-v") (lambda () (interactive) (scroll-up (/ (window-body-height) 2))))
  (global-set-key (kbd "M-v") (lambda () (interactive) (scroll-down (/ (window-body-height) 2))))
  (global-set-key (kbd "M-n") 'dabbrev-expand)
#+end_src
** Hooks
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'dired-mode-hook #'display-line-numbers-mode)
  (add-hook 'dired-mode-hook #'auto-revert-mode)
  (add-hook 'org-mode-hook #'org-indent-mode)
#+end_src
** TTY
#+begin_src emacs-lisp
  (unless (display-graphic-p)
    (load-theme 'tsdh-dark t)
    (global-set-key (kbd "C-x RET 3") 'custom/vterm-split-horizontal)
    (global-set-key (kbd "C-x RET 2") 'custom/vterm-split-vertical)
    (global-set-key (kbd "C-@") 'set-mark-command)
    (unless (string-match-p "N/A" (battery))
      (display-battery-mode)))
#+end_src
** Misc
#+begin_src emacs-lisp
  (setq auto-save-default nil
        use-short-answers 1
        doc-view-continuous t
        compile-command ""
        calendar-week-start-day 1
        vc-follow-symlinks t
        use-dialog-box nil
        make-backup-files nil)
#+end_src
