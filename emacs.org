#+TITLE: Emacs Configuration
#+AUTHOR: Giuseppe
#+PROPERTY: header-args :tangle ~/.emacs

For apply changes to the real configuration (~/.emacs) run `org-babel-tangle`.

* Packages
** Repos
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (setq package-native-compile nil
        native-comp-async-report-warnings-errors nil)
  (package-initialize)

  (eval-and-compile
    (require 'use-package-ensure)
    (setq use-package-always-defer t
          use-package-always-ensure nil
          use-package-always-pin "nongnu"))
#+end_src
** IDO vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :pin "melpa-stable"
    :init (ido-mode 1) (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
** LSP
#+begin_src emacs-lisp
  (use-package company
    :pin "melpa-stable"
    :after eglot
    :hook (eglot-managed-mode . company-mode))

  (use-package eglot
    :hook (java-mode . eglot-ensure)
    :config (add-to-list 'eglot-server-programs '((simpc-mode) "clangd")))
#+end_src
** Vterm
*Requirements:*
- emacs module support (module-file-suffix != nil)
- cmake >= 3.11
- libtool-bin
- libvterm >= 0.2 (optional)
#+begin_src emacs-lisp
  (use-package vterm
    :pin "melpa"
    :config (setq vterm-kill-buffer-on-exit t)
    (add-hook 'vterm-exit-functions
              (lambda (_ _)
                (let* ((buffer (current-buffer))
                       (window (get-buffer-window buffer)))
                  (when (not (one-window-p))
                    (delete-window window))
                  (kill-buffer buffer)))))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :pin "melpa-stable"
    :init (setq yas-snippet-dirs '("~/.dotfiles/emacs-snippets"))
    :config (yas-reload-all)
    :hook (org-mode . yas-minor-mode))
#+end_src
** Multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-beginnings-of-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this-word)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this-word)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package gruber-darker-theme
    :pin "melpa"
    :demand t
    :config (load-theme 'gruber-darker t))
#+end_src
* General
** Style
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
  (set-frame-font "IosevkaTerm NFM 12" nil t)
  (setq-default indent-tabs-mode nil)
  (setq whitespace-style '(face tabs spaces trailing space-before-tab space-after-tab space-mark tab-mark)
        display-line-numbers-type 'relative
        indent-line-function 'insert-tab
        display-line-numbers-type 'visual)
  (column-number-mode 1)
  (size-indication-mode 1)
  (setq default-frame-alist '((width . 95) (height . 32)))
#+end_src
** Languages
*** C
#+begin_src emacs-lisp
  (setq c-basic-offset 4)
  (let ((file-path "~/.dotfiles/emacs-modes/simpc-mode.el"))
    (if (file-exists-p file-path)
        (progn
          (load-file file-path)
          (add-to-list 'auto-mode-alist '("\\.[hc]\\(pp\\)?\\'" . simpc-mode)))
      (message "File does not exist: %s" file-path)))
#+end_src
*** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode)

  (use-package tide
    :pin "melpa-stable"
    :hook (typescript-mode . setup-tide-mode))

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (company-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (setq tide-format-options '(:indentSize 2 :tabSize 2))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1))

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (use-package web-mode
    :hook (web-mode . (lambda ()
                        (when (string-equal "tsx" (file-name-extension buffer-file-name))
                          (setup-tide-mode)))))
#+end_src
*** Typst
#+begin_src emacs-lisp
  (let ((file-path "~/.dotfiles/emacs-modes/typst-mode.el"))
  (if (file-exists-p file-path)
      (progn
        (load-file file-path)
        (add-to-list 'auto-mode-alist '("\\.typ\\'" . typst-mode)))
    (message "File does not exist: %s" file-path)))
#+end_src
** Org mode
#+begin_src emacs-lisp
  (setq org-preview-latex-image-directory "~/.emacs.d/latexpreview/"
        org-startup-folded t
        org-hide-emphasis-markers t
        org-html-validation-link nil)

  (custom-set-faces
   '(org-document-title ((t (:foreground "yellow" :bold t :height 1.4))))
   '(org-document-info ((t (:foreground "yellow" :height 1.3))))
   '(org-level-1 ((t (:foreground "dark orange" :inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:foreground "gold" :inherit outline-2 :height 1.1))))
   '(org-level-3 ((t (:foreground "lawn green" :inherit outline-3))))
   '(org-todo ((t (:foreground "red" :bold t :height 0.9))))
   '(org-done ((t (:foreground "PaleGreen" :height 0.9))))
   '(org-document-info-keyword ((t (:foreground "gray" :height 0.9))))
   '(org-meta-line ((t (:foreground "gray" :height 0.9))))
   '(org-block ((t (:background "#181818" :foreground "gray")))))
#+end_src
*** Auto html export
Export some specific org files to html when closing.
#+begin_src emacs-lisp
  (defun custom/org-mode-export-hook ()
    (when (string-prefix-p "/home/giuseppe/Documents/uni" (buffer-file-name))
      (add-hook 'kill-buffer-hook 'org-html-export-to-html t t)))
  (add-hook 'org-mode-hook #'custom/org-mode-export-hook)
#+end_src
** Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-lhAX --group-directories-first"
        dired-dwim-target t)
#+end_src
** Garbage collector
References: https://jackjamison.xyz/blog/emacs-garbage-collection/
#+begin_src emacs-lisp
  (defun my-minibuffer-setup-hook ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun my-minibuffer-exit-hook ()
    (setq gc-cons-threshold 800000000))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)

  (defun gc-idle-timer ()
    "Trigger garbage collection when Emacs is idle for 0.5 seconds."
    (run-with-idle-timer 1.2 t 'garbage-collect))

  (gc-idle-timer)
#+end_src
** Custom functions
#+begin_src emacs-lisp
  (defun custom/vterm-split-vertical ()
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (vterm 'N))

  (defun custom/vterm-split-horizontal ()
    (interactive)
    (split-window-horizontally)
    (other-window 1)
    (vterm 'N))

  (defun custom/fix-accent ()
    (interactive)
    (beginning-of-buffer)
    (query-replace "a'" "à")
    (beginning-of-buffer)
    (query-replace "e'" "è")
    (beginning-of-buffer)
    (query-replace "i'" "ì")
    (beginning-of-buffer)
    (query-replace "o'" "ò")
    (beginning-of-buffer)
    (query-replace "u'" "ù"))

  (defun custom/keyboard-escape-quit ()
    (interactive)
    (cond ((eq last-command 'mode-exited) nil)
          ((region-active-p)
           (deactivate-mark))
          ((> (minibuffer-depth) 0)
           (abort-recursive-edit))
          (current-prefix-arg
           nil)
          ((> (recursion-depth) 0)
           (exit-recursive-edit))
          (buffer-quit-function
           (funcall buffer-quit-function))
          ((string-match "^ \\*" (buffer-name (current-buffer)))
           (bury-buffer))))

  (defun custom/expand-region (&optional arg)
    (interactive "p")
    (backward-up-list arg (point) (point))
    (mark-sexp))
#+end_src
** Custom Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "M-!") 'compile)
  (global-set-key (kbd "C-x C-<return> 3") 'custom/vterm-split-horizontal)
  (global-set-key (kbd "C-x C-<return> 2") 'custom/vterm-split-vertical)
  (global-set-key (kbd "C-x C-<return> C-<return>") (lambda () (interactive) (vterm 'N)))
  (global-set-key (kbd "C-v") (lambda () (interactive) (scroll-up (/ (window-body-height) 2))))
  (global-set-key (kbd "M-v") (lambda () (interactive) (scroll-down (/ (window-body-height) 2))))
  (global-set-key (kbd "M-n") 'dabbrev-expand)
  (global-set-key (kbd "C-x C-o") 'other-window)
  (global-set-key (kbd "<escape>") 'custom/keyboard-escape-quit)
  (global-set-key (kbd "M-ESC ESC") 'custom/keyboard-escape-quit)
  (global-set-key (kbd "C-@") 'custom/expand-region)
#+end_src
** Hooks
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'electric-pair-mode)
  (add-hook 'dired-mode-hook #'display-line-numbers-mode)
  (add-hook 'dired-mode-hook #'auto-revert-mode)
  (add-hook 'org-mode-hook #'org-indent-mode)
#+end_src
** TTY
#+begin_src emacs-lisp
  (unless (display-graphic-p)
    (disable-theme 'gruber-darker)
    (global-set-key (kbd "C-x RET 3") 'custom/vterm-split-horizontal)
    (global-set-key (kbd "C-x RET 2") 'custom/vterm-split-vertical)
    (global-set-key (kbd "C-x RET RET") (lambda () (interactive) (vterm 'N)))
    (global-set-key (kbd "C-@") 'set-mark-command)
    (remove-hook 'org-mode-hook #'org-indent-mode)
    (unless (string-match-p "N/A" (battery))
      (display-battery-mode)))
#+end_src
** Misc
#+begin_src emacs-lisp
  (setq auto-save-default nil
        use-short-answers 1
        doc-view-continuous t
        compile-command ""
        calendar-week-start-day 1
        vc-follow-symlinks t
        use-dialog-box nil
        make-backup-files nil
        redisplay-dont-pause t)
  (setq gamegrid-glyph-height-mm 10.0) ;; Tetris size fix
#+end_src
